{
  # Azure Blob Storage endpoint, should contain container with transformer's output
  "blobStorageEndpoint": "https://${storage_account_name}.blob.core.windows.net/${storage_container_name_for_transformer_output}/",

  # Kafka topic used by Transformer and Loader to communicate
  "messageQueue": {
    "type": "kafka",
    "topicName": "${queue_topic_name}",
    "bootstrapServers": "${eh_namespace_broker}",
    "consumerConf": {
      "security.protocol": "SASL_SSL",
      "sasl.mechanism": "PLAIN",
      "sasl.jaas.config": "org.apache.kafka.common.security.plain.PlainLoginModule required username=\"$ConnectionString\" password=\"${queue_topic_connection_string}\";",
      "group.id": "${queue_group_id}"
    }
  },

  # Warehouse connection details
  "storage" : {
    # The destination DB
    "type": "snowflake",

    # A region where Snowflake DB is placed
    "snowflakeRegion": "${sf_region}",
    # DB user with permissions to load data
    "username": "${sf_username}",
    # DB password
    "password": "${sf_password}",
    # Snowflake account
    "account": "${sf_account}",
    # A warehouse to use for loading
    "warehouse": "${sf_wh_name}",
    # DB schema
    "schema": "${sf_schema}",
    # DB name
    "database": "${sf_db_name}",

    # Optional, default method is 'NoCreds'
    # Specifies the auth method to use with 'COPY INTO' statement.
    "loadAuthMethod": {
      # With 'TempCreds', temporary credentials will be created for every
      # load operation and these temporary credentials will be passed to
      # 'COPY INTO' statement. With this way, Databricks cluster doesn't need
      # permission to access to transformer output S3 bucket.
      # This access will be provided by temporary credentials.
      "type": "TempCreds"
    }
  },

  # Observability and reporting options
  "monitoring": {
%{ if sp_tracking_enabled ~}
    # Snowplow tracking (optional)
    "snowplow": {
      "appId": "${sp_tracking_app_id}",
      "collector": "${sp_tracking_collector_url}"
    },
%{ endif ~}

%{ if webhook_enabled ~}
    # An endpoint for alerts and informational events
    # Everything sent to snowplow collector (as properly formed self-describing events)
    # will also be sent to the webhook as POST payloads with self-describing JSONs
    "webhook": {
      # An actual HTTP endpoint
      "endpoint": "${webhook_collector}"
    },
%{ endif ~}

%{ if sentry_enabled ~}
    # Optional, for tracking runtime exceptions
    "sentry": {
      "dsn": "${sentry_dsn}"
    },
%{ endif ~}

    # Optional, configure how metrics are reported
    "metrics": {
%{ if statsd_enabled ~}
      # Optional, send metrics to StatsD server
      "statsd": {
        "hostname": "${statsd_host}",
        "port": ${statsd_port},
      },
%{ endif ~}

      # Optional, print metrics on stdout (with slf4j)
%{ if stdout_metrics_enabled ~}
      "stdout": {
        # Optional, override the default metric prefix
        # "prefix": "snowplow.rdbloader."
      }
%{ endif ~}

      # Optional, period for metrics emitted periodically
      # Default value 5 minutes
      # There is only one periodic metric at the moment.
      # This metric is minimum_age_of_loaded_data.
      # It specifies how old is the latest event in the warehouse.
      "period": "5 minutes"
    },

%{ if folder_monitoring_enabled ~}
    # Optional, configuration for periodic unloaded/corrupted folders checks
    "folders": {
      # Path where Loader could store auxiliary logs
      # Loader should be able to write here, Snowflake should be able to load from here
      "staging": "https://${storage_account_name}.blob.core.windows.net/${folder_monitoring_staging}/",
      # How often to check
      "period": "${folder_monitoring_period}",
      # Specifies since when folder monitoring will check
      "since": "${folder_monitoring_since}",
      # Specifies until when folder monitoring will check
      "until": "${folder_monitoring_until}",
      # Path to transformer archive (must be same as Transformer's `output.path`)
      "transformerOutput": "https://${storage_account_name}.blob.core.windows.net/${storage_container_name_for_transformer_output}/"
      # How many times the check can fail before generating an alarm instead of warning
      "failBeforeAlarm": 3
    }
%{ endif ~}

%{ if health_check_enabled ~}
    # Periodic DB health-check, raising a warning if DB hasn't responded to `SELECT 1`
    "healthCheck": {
      # How often query a DB
      "frequency": "${health_check_freq}",
      # How long to wait for a response
      "timeout": "${health_check_timeout}"
    }
%{ endif ~}
  },

%{ if retry_queue_enabled ~}
  # Additional backlog of recently failed folders that could be automatically retried
  # Retry Queue saves a failed folder and then re-reads the info from shredding_complete S3 file
  "retryQueue": {
    # How often batch of failed folders should be pulled into a discovery queue
    "period": "${retry_period}",
    # How many failures should be kept in memory
    # After the limit is reached new failures are dropped
    "size": ${retry_queue_size},
    # How many attempt to make for each folder
    # After the limit is reached new failures are dropped
    "maxAttempts": ${retry_queue_max_attempt},
    # Artificial pause after each failed folder being added to the queue
    "interval": "${retry_queue_interval}"
  }
%{ endif ~}

  "telemetry": {
    "disable": ${telemetry_disable}
    "interval": 1 minutes
    "method": "POST"
    "collectorUri": "${telemetry_collector_uri}"
    "collectorPort": ${telemetry_collector_port}
    "secure": ${telemetry_secure}
    "userProvidedId": "${telemetry_user_provided_id}"
    "autoGeneratedId": "${telemetry_auto_gen_id}"
    "moduleName": "${telemetry_module_name}"
    "moduleVersion": "${telemetry_module_version}"
    "instanceId": $${INSTANCE_ID}
  }
}
